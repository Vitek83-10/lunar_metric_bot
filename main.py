import logging
from pyrogram import Client, filters
import requests
import os
import asyncio

# –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
BOT_TOKEN = "7587000383:AAFZKVttoUHcACMXrw2I2rWC4kQ47ExPtdg"
API_ID = 20234202
API_HASH = "fc0e099e810cbea903512acef8563b36"
LUNAR_API_TOKEN = "dcovsxshktuhbwvqtuxgx5v3l7gc1ffzq2xr96s5lz0i8v51"  # ‚úÖ –ü–æ–ª–Ω—ã–π

app = Client("lunar_bot", bot_token=BOT_TOKEN, api_id=API_ID, api_hash=API_HASH)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@app.on_message(filters.command("start"))
async def start_handler(client, message):
    await message.reply("üëã –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –û—Ç–ø—Ä–∞–≤—å CA —Ç–æ–∫–µ–Ω–∞, –∏ —è –ø–æ–∫–∞–∂—É –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ LunarCrush.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–¥—Ä–µ—Å–æ–º —Ç–æ–∫–µ–Ω–∞
@app.on_message(filters.text & ~filters.command(["start"]))
async def token_handler(client, message):
    token_address = message.text.strip()

    if not token_address.startswith("0x") and len(token_address) < 32:
        await message.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –≤–∞–ª–∏–¥–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0x –∏–ª–∏ –¥–ª–∏–Ω–∞ –æ—Ç 32 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    await message.reply("‚è≥ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ LunarCrush...")
    try:
        data = get_lunar_metrics(token_address)
        if not data:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏ LunarCrush –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞.")
            return

        response = format_lunar_response(data, token_address)
        await message.reply(response, disable_web_page_preview=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ LunarCrush.")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ LunarCrush
def get_lunar_metrics(ca_address):
    url = f"https://api.lunarcrush.com/v2?data=assets&key={LUNAR_API_TOKEN}&symbol={ca_address}&chain=solana"
    response = requests.get(url)
    if response.status_code != 200:
        return None
    data = response.json()
    if "data" not in data or len(data["data"]) == 0:
        return None
    return data["data"][0]

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
def format_lunar_response(data, ca):
    engagements = data.get("galaxy_score_metrics", {}).get("twitter", {}).get("tweet_engagement", 0)
    mentions = data.get("galaxy_score_metrics", {}).get("twitter", {}).get("tweet_mentions", 0)
    creators = data.get("galaxy_score_metrics", {}).get("twitter", {}).get("tweet_creators", 0)
    sentiment = data.get("galaxy_score_metrics", {}).get("twitter", {}).get("tweet_sentiment", 0)

    verdict = "‚úÖ –ü—Ä–æ—Ö–æ–¥–∏—Ç —Ñ–∏–ª—å—Ç—Ä" if (
        engagements >= 10 and mentions >= 10 and creators >= 10 and sentiment >= 75
    ) else "‚ùå –ù–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ñ–∏–ª—å—Ç—Ä"

    return f"""üìä –ú–µ—Ç—Ä–∏–∫–∏ LunarCrush:

‚Ä¢ üó£ Mentions: {mentions}
‚Ä¢ üë§ Creators: {creators}
‚Ä¢ üí¨ Engagements: {engagements}
‚Ä¢ ‚ù§Ô∏è Sentiment: {sentiment}%

{verdict}

üîó Token CA: `{ca}`"""

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("üöÄ LunarMetric_Bot –∑–∞–ø—É—â–µ–Ω.")
    app.run()
