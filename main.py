import asyncio
from pyrogram import Client, filters
from config import BOT_TOKEN, API_ID, API_HASH
from lunar import fetch_lunar_data, filter_lunar_tokens

bot = Client("lunar_bot", bot_token=BOT_TOKEN, api_id=API_ID, api_hash=API_HASH)

@bot.on_message(filters.command("start"))
async def start_command(client, message):
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ:")

@bot.on_message(filters.command("help"))
async def help_command(client, message):
    await message.reply(
        "üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –∑–∞–ø—É—Å–∫\n"
        "/status ‚Äî —Å—Ç–∞—Ç—É—Å\n"
        "/test ‚Äî —Ç–µ—Å—Ç\n"
        "/help ‚Äî –ø–æ–º–æ—â—å"
    )

@bot.on_message(filters.command("test"))
async def test_command(client, message):
    await message.reply("üß™ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

@bot.on_message(filters.command("status"))
async def status_command(client, message):
    await message.reply("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. LunarCrush –±—É–¥–µ—Ç –æ–ø—Ä–∞—à–∏–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.")

async def lunar_polling():
    while True:
        try:
            tokens = await fetch_lunar_data()
            filtered = filter_lunar_tokens(tokens)
            for token in filtered:
                text = (
                    f"üåï –ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω:\n"
                    f"‚Ä¢ CA: `{token['token']}`\n"
                    f"‚Ä¢ Engagements: {token['engagements']}\n"
                    f"‚Ä¢ Mentions: {token['mentions']}\n"
                    f"‚Ä¢ Creators: {token['creators']}\n"
                    f"‚Ä¢ Sentiment: {token['sentiment']}%\n"
                    f"\nüí∞ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ –≤—Ö–æ–¥—É: –î–ê"
                )
                await bot.send_message(chat_id=message.chat.id, text=text)
        except Exception as e:
            print(f"[ERROR] {e}")
        await asyncio.sleep(300)

async def main():
    await bot.start()
    asyncio.create_task(lunar_polling())
    await idle()

if __name__ == "__main__":
    import nest_asyncio
    from pyrogram import idle
    nest_asyncio.apply()
    asyncio.run(main())
